import __version__
import argparse
import sys

def parse_args(arglist):
    parser = argparse.ArgumentParser(description='SpliceAI framework')
    subparser_data = parser.add_subparsers(dest='create_data')
    subparser_train = parser.add_subparsers(dest='train')
    subparser_eval = parser.add_subparsers(dest='eval')
    subparser_predict = parser.add_subparsers(dest='predict')
    subparser_data.add_parser('foo')



    # parser.add_argument('target', help='target fasta genome to lift genes to')
    # parser.add_argument('reference', help='reference fasta genome to lift genes from')
    # parser.add_argument('-E', '--evaluation', help='Run LiftOn in evaluation mode', action='store_true', default = False)
    # parser.add_argument('-c', '--write_chains', help='Write chaining files', action='store_true', default = True)
    # parser_outgrp = args_outgrp(parser)
    # parser_aligngrp = args_aligngrp(parser)
    # args_optional(parser)
    # referencegrp = parser.add_argument_group('* Required input (Reference annotation)')    
    # referencegrp.add_argument(
    #     '-g', '--reference-annotation', metavar='GFF',  required=True,
    #     help='the reference annotation file to lift over in GFF or GTF format (or) '
    #             'name of feature database; if not specified, the -g '
    #             'argument must be provided and a database will be built automatically'
    # )
    # ###################################
    # # START for the LiftOn params
    # ###################################
    # referenceseqgrp = parser.add_argument_group('* Optional input (Reference sequences)')
    # referenceseqgrp.add_argument(
    #     '-P', '--proteins', metavar='FASTA', required=False, default=None,
    #     help='the reference protein sequences.'
    # )
    # referenceseqgrp.add_argument(
    #     '-T', '--transcripts', metavar='FASTA', required=False, default=None,
    #     help='the reference transcript sequences.'
    # )
    # liftoffrefrgrp = parser.add_argument_group('* Optional input (Liftoff annotation)')
    # liftoffrefrgrp.add_argument(
    #     '-L', '--liftoff', metavar='gff', default=None,
    #     help='the annotation generated by Liftoff (or) '
    #             'name of Liftoff gffutils database; if not specified, the -liftoff '
    #             'argument must be provided and a database will be built automatically'
    # )
    # miniprotrefrgrp = parser.add_argument_group('* Optional input (miniprot annotation)')
    # miniprotrefrgrp.add_argument(
    #     '-M', '--miniprot', metavar='gff', default=None,
    #     help='the annotation generated by miniprot (or) '
    #             'name of miniprot gffutils database; if not specified, the -miniprot '
    #             'argument must be provided and a database will be built automatically'
    # )
    ###################################
    # END for the LiftOn params
    ###################################
    parser._positionals.title = '* Required input (sequences)'
    parser._optionals.title = '* Miscellaneous settings'
    parser._action_groups = [parser._positionals, subparser_data, subparser_train]
    args = parser.parse_args(arglist)
    # if '-a' not in args.mm2_options:
    #     args.mm2_options += ' -a'
    # if '--eqx' not in args.mm2_options:
    #     args.mm2_options += ' --eqx'
    # if '-N' not in args.mm2_options:
    #     args.mm2_options += " -N 50"
    # if '-p' not in args.mm2_options:
    #     args.mm2_options += " -p 0.5"
    # if '--end-bonus' not in args.mm2_options:
    #     args.mm2_options += "--end-bonus 5"
    # if (float(args.s) > float(args.sc)):
    #     parser.error("-sc must be greater than or equal to -s")
    # if (args.chroms is None and args.unplaced is not None):
    #     parser.error("-unplaced must be used with -chroms")
    return args

def main(arglist=None):
    # ANSI Shadow
    banner = '''
====================================================================
Deep learning framework to train your own SpliceAI model
====================================================================


    ███████╗██████╗ ██╗     ██╗ ██████╗███████╗ █████╗ ██╗
    ██╔════╝██╔══██╗██║     ██║██╔════╝██╔════╝██╔══██╗██║
    ███████╗██████╔╝██║     ██║██║     █████╗  ███████║██║
    ╚════██║██╔═══╝ ██║     ██║██║     ██╔══╝  ██╔══██║██║
    ███████║██║     ███████╗██║╚██████╗███████╗██║  ██║██║
    ╚══════╝╚═╝     ╚══════╝╚═╝ ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝
    '''
    print(banner, file=sys.stderr)
    print(f"{__version__}\n", file=sys.stderr)
    args = parse_args(arglist)

if __name__ == "__main__":
    main()