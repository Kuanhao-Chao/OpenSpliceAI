.. raw:: html

    <script type="text/javascript">

        let mutation_lvl_1_fuc = function(mutations) {
            var dark = document.body.dataset.theme == 'dark';

            if (document.body.dataset.theme == 'auto') {
                dark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            }
            
            document.getElementsByClassName('sidebar_ccb')[0].src = dark ? '../../_static/JHU_ccb-white.png' : "../../_static/JHU_ccb-dark.png";
            document.getElementsByClassName('sidebar_wse')[0].src = dark ? '../../_static/JHU_wse-white.png' : "../../_static/JHU_wse-dark.png";



            for (let i=0; i < document.getElementsByClassName('summary-title').length; i++) {
                console.log(">> document.getElementsByClassName('summary-title')[i]: ", document.getElementsByClassName('summary-title')[i]);

                if (dark) {
                    document.getElementsByClassName('summary-title')[i].classList = "summary-title card-header bg-dark font-weight-bolder";
                    document.getElementsByClassName('summary-content')[i].classList = "summary-content card-body bg-dark text-left docutils";
                } else {
                    document.getElementsByClassName('summary-title')[i].classList = "summary-title card-header bg-light font-weight-bolder";
                    document.getElementsByClassName('summary-content')[i].classList = "summary-content card-body bg-light text-left docutils";
                }
            }

        }
        document.addEventListener("DOMContentLoaded", mutation_lvl_1_fuc);
        var observer = new MutationObserver(mutation_lvl_1_fuc)
        observer.observe(document.body, {attributes: true, attributeFilter: ['data-theme']});
        console.log(document.body);
    </script>

|

.. _quick-start_train:

Quick Start Guide: ``train``
=============================

This guide walks you through the essentials of using the ``train`` subcommand to build an OpenSpliceAI model from example data for splice site prediction. It converts HDF5 datasets (generated by the ``create-data`` subcommand) into a trained deep learning model.

|

Before You Begin
----------------

- **Installation**: Follow the instructions on the :ref:`Installation` page to install OpenSpliceAI and its dependencies.

- **Dataset Preparation**: Ensure you have created the training and testing datasets using the ``create-data`` subcommand. Check the :ref:`quick-start_create_data` guide for details. You need two files as inputsw: ``dataset_train.h5`` and ``dataset_test.h5``.


|



.. |download_icon| raw:: html

   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

   <i class="fa fa-download"></i>


One-liner Start
-----------------

Suppose you have generated the following files from the ``create-data`` subcommand or you can directly download them from GitHub:
 

1. **Training Dataset**: `dataset_train.h5 <https://github.com/Kuanhao-Chao/OpenSpliceAI/blob/main/examples/create-data/results/dataset_train.h5>`_ |download_icon|
2. **Testing Dataset**: `dataset_test.h5 <https://github.com/Kuanhao-Chao/OpenSpliceAI/blob/main/examples/create-data/results/dataset_test.h5>`_ |download_icon|
3. **Desired Flanking Size**: 10,000 nt

Run this command to train your model:

.. code-block:: bash

   openspliceai train \
      --flanking-size 10000 \
      --train-dataset dataset_train.h5 \
      --test-dataset dataset_test.h5 \
      --output-dir /path/to/model_train_outdir/ \
      --project-name human_MANE_example \
      --scheduler CosineAnnealingWarmRestarts \
      --loss cross_entropy_loss

This command will:

- Load your training and testing HDF5 files.
- Initialize and train the SpliceAI model using the specified flanking size.
- Apply adaptive learning rate scheduling and early stopping.
- Save model checkpoints (e.g., ``model_best.pt``) and logs in the output directory.

The example outputs from this command can be found in the `OpenSpliceAI GitHub repository <https://github.com/Kuanhao-Chao/OpenSpliceAI/tree/main/examples/train/results>`_ |download_icon|

.. admonition:: Note
   :class: important

   Please note that the model trained in this experiment is not optimized for splice site prediction, as it was trained only on a small subset of the data. This example is intended solely to demonstrate the training process. For a fully optimized, pre-trained model, please refer to the :ref:`pretrained_models_home` guide.

|

Next Steps
----------

- **Explore the ``train`` Options:**  
  Delve into the :ref:`train_subcommand` documentation to discover how you can further customize your training process.

- **Calibration (Optional):**  
  Improve the reliability of your model’s probability outputs. See the :ref:`quick-start_calibrate` guide for detailed calibration instructions.

- **Prediction:**  
  Ready to make predictions? Follow the :ref:`quick-start_predict` guide to use your trained model for splice site prediction.

- **Advanced Options:**  
  Experiment with additional training parameters (such as epochs and patience) to fine-tune your model’s performance.



|
|
|
|
|


.. image:: ../../_images/jhu-logo-dark.png
   :alt: My Logo
   :class: logo, header-image only-light
   :align: center

.. image:: ../../_images/jhu-logo-white.png
   :alt: My Logo
   :class: logo, header-image only-dark
   :align: center